generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Employee_number {
  employeeNumber String @unique @id
  employee Employee?
}

model Employee {
  employeeId String @id @default(uuid())
  employeeFirstName String
  employeeSecondName String
  employeePhotoUrl String
  employeePhoneNumber String @unique
  employeeEmailAddress String @unique
  employeeGender String
  employeePassword String
  employeeRole String @default("employee")
 
  employeeNumber String @unique
  number Employee_number @relation(fields: [employeeNumber], references: [employeeNumber], onDelete: Cascade)
  
  office Office?
}

model Bus {
  busId String @id @default(uuid())
  busNumber String @unique
  numberOfSeats Int
  rearSeat Int
  numberOfRows Int
  wifi Boolean
  adjustableSeat Boolean
  ac Boolean
  sockets Boolean
  luggageCompartment Boolean

  busRoute Route[]
}

model Route {
  routeid String @id @default(uuid())
  from String
  to String
  departureTime String
  arrivalTime String
  passengerArrivalTime String
  price Int

  @@unique([from , to, departureTime, arrivalTime, passengerArrivalTime])

  busUsed Bus @relation(fields: [busId], references: [busId])
  busId String @unique

  bookings Book[]
}

model Office {
  officeId String @id @default(uuid())
  officeLocation String 
  officeBuilding String

  @@unique([officeLocation,officeBuilding])

  office Employee? @relation(fields: [employeeId], references: [employeeId])
  employeeId String @unique
}

model Book {
  bookId String @id @default(uuid())
  passengerName String
  passengerPhone String
  passengerID String 
  travellingDate String
  selectedSeat String[]
  numberOfSeats Int
  
  routeBooked Route @relation(fields: [routeId], references: [routeid])
  routeId String @unique
}
